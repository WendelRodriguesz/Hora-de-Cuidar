generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PACIENTE
  PROFISSIONAL
  ADMIN
}

enum Status {
  ativo
  inativo
  aguardando_aprovacao
}

model Usuario {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String
  email     String   @unique
  senha     String
  telefone  String?
  dataNasc  DateTime @map("data_nascimento")
  sexo      String
  cpf       String   @unique
  role      Role
  enderecoId String? @db.Uuid
  endereco  Endereco? @relation(fields: [enderecoId], references: [id])

  profissional  Profissional?
  paciente      Paciente?
  administrador Administrador?

  anexos       AnexoPaciente[]
  comentarios  ComentarioPaciente[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("usuarios")
}

model Administrador {
  id        String   @id @default(uuid()) @db.Uuid
  usuarioId String   @unique @db.Uuid
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  profissionaisSolicitados ProfissionalSolicitacao[]

  @@map("administradores")
}

model ProfissionalSolicitacao {
  id              String   @id @default(uuid()) @db.Uuid
  nome            String
  areaAtuacao     String
  email           String
  telefone        String
  documentoUrl    String
  status          Status  @default(aguardando_aprovacao)
  administradorId String? @db.Uuid
  administrador   Administrador? @relation(fields: [administradorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("solicitacoes_profissional")
}

model Profissional {
  id              String   @id @default(uuid()) @db.Uuid
  usuarioId       String   @unique @db.Uuid
  usuario         Usuario  @relation(fields: [usuarioId], references: [id])
  areaAtuacao     String
  status          Status
  codigo          String

  planosAlimentares PlanoAlimentar[]
  consultas         ProfissionalConsulta[]

  @@map("profissionais")
}

model Paciente {
  id               String   @id @default(uuid()) @db.Uuid
  usuarioId        String   @unique @db.Uuid
  usuario          Usuario  @relation(fields: [usuarioId], references: [id])
  prontuario       String?
  doencasConfirmadas String?
  doencasSuspeitas   String?

  consultas   PacienteConsulta[]
  afericoes   Afericao[]
  planos      PlanoAlimentar[]

  @@map("pacientes")
}

model Afericao {
  id          String   @id @default(uuid()) @db.Uuid
  pacienteId  String   @db.Uuid
  paciente    Paciente @relation(fields: [pacienteId], references: [id])

  tipo        String   // exemplo: "peso", "press√£o"
  valor       String
  data        DateTime @default(now())

  @@map("afericoes")
}


model PlanoAlimentar {
  id             String   @id @default(uuid()) @db.Uuid
  profissionalId String   @db.Uuid
  pacienteId     String   @db.Uuid
  status         Status   @default(ativo)

  profissional   Profissional @relation(fields: [profissionalId], references: [id])
  paciente       Paciente     @relation(fields: [pacienteId], references: [id])
  refeicoes      Refeicao[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("planos_alimentares")
}

model Refeicao {
  id         String   @id @default(uuid()) @db.Uuid
  nome       String
  horario    String
  observacoes String?

  planoId    String   @db.Uuid
  plano      PlanoAlimentar @relation(fields: [planoId], references: [id])
  alimentos  AlimentoRefeicao[]

  @@map("refeicoes")
}

model Alimento {
  id         String   @id @default(uuid()) @db.Uuid
  nome       String
  quantidade String
  refeicoes  AlimentoRefeicao[]

  @@map("alimentos")
}

model AlimentoRefeicao {
  id         String   @id @default(uuid()) @db.Uuid
  alimentoId String   @db.Uuid
  refeicaoId String   @db.Uuid

  alimento   Alimento @relation(fields: [alimentoId], references: [id])
  refeicao   Refeicao @relation(fields: [refeicaoId], references: [id])

  @@map("alimentos_refeicao")
}

model Consulta {
  id        String   @id @default(uuid()) @db.Uuid
  data      DateTime
  paciente  PacienteConsulta[]
  prof      ProfissionalConsulta[]

  @@map("consultas")
}

model PacienteConsulta {
  id          String   @id @default(uuid()) @db.Uuid
  pacienteId  String   @db.Uuid
  consultaId  String   @db.Uuid

  paciente    Paciente  @relation(fields: [pacienteId], references: [id])
  consulta    Consulta  @relation(fields: [consultaId], references: [id])

  @@map("paciente_consulta")
}

model ProfissionalConsulta {
  id              String   @id @default(uuid()) @db.Uuid
  profissionalId  String   @db.Uuid
  consultaId      String   @db.Uuid

  profissional    Profissional @relation(fields: [profissionalId], references: [id])
  consulta        Consulta     @relation(fields: [consultaId], references: [id])

  @@map("profissional_consulta")
}

model AnexoPaciente {
  id           String   @id @default(uuid()) @db.Uuid
  tipo         String
  urlDocumento String
  usuarioId    String   @db.Uuid
  dataUpload   DateTime @default(now())

  usuario      Usuario  @relation(fields: [usuarioId], references: [id])

  @@map("anexos_pacientes")
}

model ComentarioPaciente {
  id        String   @id @default(uuid()) @db.Uuid
  conteudo  String
  usuarioId String   @db.Uuid

  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  @@map("comentarios_pacientes")
}

model Estabelecimento {
  id         String   @id @default(uuid()) @db.Uuid
  nome       String
  email      String?
  telefone   String?
  cnpj       String   @unique
  cnes       String   @unique
  enderecoId String   @db.Uuid
  endereco   Endereco @relation(fields: [enderecoId], references: [id])

  @@map("estabelecimentos")
}

model Endereco {
  id         String   @id @default(uuid()) @db.Uuid
  rua        String
  numero     String
  cep        String
  complemento String?
  bairroId   String
  bairro     Bairro @relation(fields: [bairroId], references: [id])

  usuarios       Usuario[]
  estabelecimentos Estabelecimento[]

  @@map("enderecos")
}

model Bairro {
  id          String   @id @default(uuid()) @db.Uuid
  nome        String
  municipioId String
  municipio   Municipio @relation(fields: [municipioId], references: [id])

  enderecos   Endereco[]

  @@map("bairros")
}

model Municipio {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String
  estadoId  String
  estado    Estado @relation(fields: [estadoId], references: [id])

  bairros   Bairro[]

  @@map("municipios")
}

model Estado {
  id     String   @id @default(uuid()) @db.Uuid
  nome   String
  sigla  String

  municipios Municipio[]

  @@map("estados")
}
